')
a=-1.24458046630025
b=-1.25191834103316
c=-1.81590817030519
d=-1.90866735205054
df=createTrajectory(10000000, 0, 0, a, b, c, d)
png("Clifford.png", units="px", width=1600, height=1600, res=300)
ggplot(df, aes(x, y)) + geom_point(color="black", shape=46, alpha=.01) + opt
dev.off()
getwd()
a=-1.24458046630025
b=-1.25191834103316
c=-1.81590817030519
d=-1.1
df=createTrajectory(10000000, 0, 0, a, b, c, d)
png("Clifford.png", units="px", width=1600, height=1600, res=300)
ggplot(df, aes(x, y)) + geom_point(color="black", shape=46, alpha=.01) + opt
dev.off()
a=-1.24458046630025
b=-1.25191834103316
c=-1.81590817030519
d=-1.91
df=createTrajectory(10000000, 0, 0, a, b, c, d)
png("Clifford.png", units="px", width=1600, height=1600, res=300)
ggplot(df, aes(x, y)) + geom_point(color="black", shape=46, alpha=.01) + opt
dev.off()
a=-1.4458046630025
b=-1.5191834103316
c=-1.1590817030519
d=-1.1
df=createTrajectory(10000000, 0, 0, a, b, c, d)
png("Clifford.png", units="px", width=1600, height=1600, res=300)
ggplot(df, aes(x, y)) + geom_point(color="black", shape=46, alpha=.01) + opt
dev.off()
library(readr)
ARGENTINA_MAR_DEL_PLATA_ipt_occurrence <- read_csv("MBON/P2P/data2/IPTFiles/ARGENTINA-MAR DEL PLATA_ipt_occurrence.csv")
View(ARGENTINA_MAR_DEL_PLATA_ipt_occurrence)
unique(ARGENTINA_MAR_DEL_PLATA_ipt_occurrence$scientificName)
library(robis)
kk =occurrence(areaid = 40012)
url = "http://geoserver-123.aodn.org.au/geoserver/ows?typeName=moorings_all_map&SERVICE=WFS&REQUEST=GetFeature&VERSION=1.0.0&outputFormat=csv&CQL_FILTER=(realtime=FALSE)"
df = readr::read_csv(url)
vv = df$variables
sum('TURBF' %in% vv)
sum(grepl('TURBF', vv))
library(rerddap)
crwdhw = info("NOAA_DHW_5km")
eurl()
griddap <- function(x, ..., fields = 'all', stride = 1, fmt = "nc",
url = eurl(), store = disk(), read = TRUE, callopts = list()) {
calls <- names(sapply(match.call(), deparse))[-1]
calls_vec <- "ncdf" %in% calls
if (any(calls_vec)) {
stop(
"The parameter ncdf has been removed. We use ncdf4 package now internally",
call. = FALSE)
}
x <- as.info(x, url)
dimargs <- list(...)
check_dims(dimargs, x)
check_lat_text(dimargs)
check_lon_text(dimargs)
dimargs <- fix_dims(dimargs, .info = x)
check_lon_data_range(dimargs, x)
check_lat_data_range(dimargs, x)
d <- attr(x, "datasetid")
var <- field_handler(fields, x$variables$variable_name)
dims <- dimvars(x)
store <- toggle_store(fmt, store)
if (all(var == "none")) {
args <- paste0(sapply(dims, function(y) {
parse_args(x, y, stride, dimargs, wname = TRUE)
}), collapse = ",")
} else {
pargs <- sapply(dims, function(y) parse_args(x, y, stride, dimargs))
args <- paste0(lapply(var, function(y) {
paste0(y, paste0(pargs, collapse = ""))
}), collapse = ",")
}
fmt <- match.arg(fmt, c("nc", "csv"))
resp <- erd_up_GET(url = sprintf("%sgriddap/%s.%s", url, d, fmt), dset = d,
args = args, store = store, fmt = fmt, callopts)
loc <- if (store$store == "disk") resp else "memory"
outclasses <- switch(fmt,
nc = c("griddap_nc", "nc", "list"),
csv = c("griddap_csv", "csv", "data.frame"))
read <- toggle_read(read, store)
structure(
read_all(resp, fmt, read),
class = outclasses,
datasetid = d,
path = loc,
url = url_build(sprintf("%sgriddap/%s.%s", url, d, fmt), args)
)
}
allsurvey = read.csv("GIS/Data/Aerial9802.csv", stringsAsFactors = F)
getwd()
library(readr)
DHW <- read_csv("AIMS/NESP5.7/GIS/Data/DHW/DHW_2002_1.csv")
View(DHW)
length(unique(DHW$UNIQUE_ID))
library(readr)
DHW <- read_csv("AIMS/NESP5.7/GIS/Data/DHW/DHW_1998_1_tmp.csv",
col_names = c("time", "latitude", "longitude", "CRW_DHW", "CRW_HOTSPOT", "CRW_SST", "CRW_SSTa", "UNIQUE_ID", "reefName"))
length(DHW$UNIQUE_ID)
length(unique(DHW$UNIQUE_ID))
library(ggplot2)
pp = ggplot(DHW, aes(time, CRW_DHW))
pp + geom_point()
pp = ggplot(DHW, aes(time, CRW_DHW, group=time))
pp + geom_boxplot()
library(dplyr)
kk = DHW %>% group_by(UNIQUE_ID) %>% summarise(DHW.max = max(DHW), DHW.dmax = time[which.max(DHW)])
kk = DHW %>% group_by(UNIQUE_ID) %>% summarise(DHW.max = max(DHW), DHW.dmax = time[which.max(DHW)][1])
kk = DHW %>% group_by(UNIQUE_ID) %>% summarise(DHW.max = max(DHW))
kk = DHW %>% group_by(UNIQUE_ID) %>% summarise(DHW.max = max(CRW_DHW), DHW.dmax = time[which.max(CRW_DHW)])
kk
View(kk)
pp = ggplot(kk, aes(DHW.dmax, DHW.max))
pp + geom_point()
kk = DHW %>% group_by(UNIQUE_ID) %>% summarise(latitude= mean(latitude), longitude = mean(longitude), DHW.max = max(CRW_DHW), DHW.dmax = time[which.max(CRW_DHW)])
pp = ggplot(kk, aes(time, latitude))
pp + geom_point()
pp = ggplot(kk, aes(DHW.dmax, latitude))
pp + geom_point()
pp + geom_point(size = DHW.max)
pp + geom_point(aes(size = DHW.max))
library(plotly)
library(dplyr)
plot_ly(x = longitude, y=latitude, z=time, type"scatter3d", mode="markers", color=DHW.max)
plot_ly(x = longitude, y=latitude, z=time, type="scatter3d", mode="markers", color=DHW.max)
plot_ly(x = longitude, y=latitude, z=time, type="scatter3d", mode="markers", color=DHW.max, data=DHW)
plot_ly(x = DHW$longitude, y=DHW$latitude, z=DHW$time, type="scatter3d", mode="markers", color=DHW$DHW.max,)
plot_ly(x = kk$longitude, y=kk$latitude, z=kk$DHW.dmax, type="scatter3d", mode="markers", color=kk$DHW.max,)
plot_ly(x = kk$longitude, y=kk$latitude, z=kk$DHW.dmax, type="scatter3d", mode="markers", color=kk$DHW.max,size=1)
library(lubridate)
pp = plot_ly(x = kk$longitude, y=kk$latitude, z=kk$DHW.dmax, type="scatter3d", mode="markers", color=kk$DHW.max) %>%
layout(scene = list(zaxis = list(range(c(ymd(1990101), ymd(19980330))))))
pp
pp = plot_ly(x = kk$longitude, y=kk$latitude, z=kk$DHW.dmax, type="scatter3d", mode="markers", color=kk$DHW.max)
pp
ymd(1990101)
ymd(19980101)
class(ymd(19980101))
pp = plot_ly(x = kk$longitude, y=kk$latitude, z=yday(kk$DHW.dmax), type="scatter3d", mode="markers", color=kk$DHW.max)
pp
pp = plot_ly(x = kk$longitude, y=kk$latitude, z=yday(kk$DHW.dmax), type="scatter3d", mode="markers", color=kk$DHW.max) %>%
layout(scene = list(zaxis = list(range(c(1,50))))))
pp = plot_ly(x = kk$longitude, y=kk$latitude, z=yday(kk$DHW.dmax), type="scatter3d", mode="markers", color=kk$DHW.max) %>%
layout(scene = list(zaxis = list(range(c(1,50)))))
pp
library(obistools)
library(xlsx)
detach("package:xlsx", unload = TRUE)
library(readxl)
df = read_xlsx("/home/eklein/Proyectos/OBIS/kk/Event_CIMAR21.xlsx")
check_eventids(df)
# make this an external chunk that can be included in any file
require(knitr)
options(width = 100, stringAsFactors=F)
opts_chunk$set(echo =T, message = F, error = F, warning = F, comment = NA,
fig.align = 'left',  fig.width = 7.5, fig.height = 6,
tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(RColorBrewer)
palette(brewer.pal(8, "Set2"))
library(readr)
library(readxl)
library(lubridate)
library(ggplot2)
library(dplyr)
baird16 = read_xlsx("Mortality/Baird_2016.xlsx", sheet = 1)
install.packages("parameters")
library(parameters)
df = iris
df$Sepal.Big <- ifelse(df$Sepal.Width >= 3, "Yes", "No")
model <- aov(Sepal.Length ~ Sepal.Big, data = df)
model_parameters(model, eta_squared = "partial")
model <- cor.test(iris$Sepal.Length, iris$Sepal.Width)
model_parameters(model)
df <- iris
df$Sepal.Big <- ifelse(df$Sepal.Width >= 3, "Yes", "No")
model <- t.test(Sepal.Length ~ Sepal.Big, data = df)
model_parameters(model)
model <- glm(vs ~ wt + cyl, data = mtcars, family = "binomial")
model_parameters(model, standardize = "refit")
?mtcars
x <- rnorm(300)
describe_distribution(x)
library(ggplot2)
pp = ggplot(mtcars, aes(cyl, mpg, fill=cyl))
pp + geom_violin()
pp + geom_violindot(fill_dots="black")
install.packages("see")
library(see)
pp + geom_violindot(fill_dots="black")
pp = ggplot(mtcars, aes(cyl, mpg, fill=cyl, group=cyl))
pp + geom_violindot(fill_dots="black")
pp = ggplot(mtcars, aes(cyl, mpg, fill=as.factor(cyl)))
pp + geom_violindot(fill_dots="black")
pp + geom_violindot(fill_dots="black") + scale_fill_material_d() + theme_blackboard()
pp + geom_violindot(fill_dots="white") + scale_fill_material_d() + theme_blackboard()
pp + geom_violindot(fill_dots="white") + scale_fill_material_c() + theme_blackboard()
pp + geom_violindot(fill_dots="white") + scale_fill_material_d() + theme_blackboard()
pp + geom_violindot(fill_dots="blue") + scale_fill_material_d() + theme_blackboard()
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_violindot(fill_dots = "white") +
scale_fill_material_d() +
theme_blackboard()
devtools::install_github("easystats/correlation")
library(correlation)
correlation(iris)
df=iris
correlation(df)
str(iris)
str(iris[,1:4])
correlation(iris[.1:4])
correlation(iris[,1:4])
correlation(iris)
library(correlation)
correlation(iris)
devtools::install_github("easystats/correlation")
devtools::install_github("easystats/correlation", force=T)
library(correlation)
correlation(iris)
correlation(iris[,1:4])
library(correlation)
correlation(iris)
df = data.frame(a=rnorm(100,1,1), b=rnorm(100,2,3))
correlation(df)
df
cor(df)
devtools::install_github("neuropsychology/report")
library(report)
r = report(iris)
report(iris)
rport(mtcars)
rr = report(mtcars)
library(dplyr)
rr = report(mtcars)
lm(Sepal.Length ~ Petal.Length + Species, data=iris) %>%
report() %>%
to_table()
glm(Sepal.Length ~ Petal.Length + Species, data=iris) %>%
report() %>%
to_table()
report(iris)
library(report)
report(iris)
report(ntcars)
iris %>% report() %>% to_table()
url = "http://geoserver-123.aodn.org.au/geoserver/ows?typeName=moorings_all_map&SERVICE=WFS&REQUEST=GetFeature&VERSION=1.0.0&outputFormat=csv"
df = readr::read_csv(url)
df.delayed = df[!df$realtime,]
df.delayed$url[1]
df.delayed = df[!df$realtime &df$data_category=="timeseries",]
View(df.delayed)
df.delayed = df[(!df$realtime & df$data_category=="timeseries"),]
View(df.delayed)
library(rerddap)
crwdhw = infor("NOAA_DHW_5km")
crwdhw = info("NOAA_DHW_5km")
?info
url()
?url.
?url.show
crwdhw = info("NOAA_DHW_5km", url="http://oos.soest.hawaii.edu/erddap/griddap/")
crwdhw = info("NOAA_DHW_5km", url="http://oos.soest.hawaii.edu")
crwdhw = info("NOAA_DHW_5km", url="http://oos.soest.hawaii.edu/erddap/")
devtools::install_github("easystats/insight")
devtools::install_github("easystats/parameters")
devtools::install_github("easystats/report")
library(report)
report(iris)
library(parameters)
report(iris)
library(report)
report(iris)
library(report)
report(iris)
library(ggplot2)
x = 1:100
y = c(jitter(rep(1, 40)), jitter(rep(2,20)), jitter(rep(1,40)))
plot(x,y)
plot(x,y, ylim = (0,10))
plot(x,y, ylim = c(0,10))
y = c(jitter(rep(1, 40)), jitter(c(1,2,3,4,5,6,7,8,9,10,9,8,7,6,5,4,3,2,1)), jitter(rep(1,40)))
plot(x,y, ylim = c(0,10))
length(y)
y = c(jitter(rep(1, 40)), jitter(c(1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1)), jitter(rep(1,40)))
plot(x,y, ylim = c(0,10))
install.packages("gbm")
library(gbm)
set.seed(101)
N=1000
X1 = runif(N)
X2 = 2*runif(N)
X3 <- ordered(sample(letters[1:4], N, replace = TRUE), levels = letters[4:1])
X4 <- factor(sample(letters[1:6], N, replace = TRUE))
X5 <- factor(sample(letters[1:3], N, replace = TRUE))
X6 <- 3 * runif(N)
mu <- c(-1, 0, 1, 2)[as.numeric(X3)]
mu
X3
SNR <- 10 # signal-to-noise ratio
Y <- X1 ^ 1.5 + 2 * (X2 ^ 0.5) + mu
sigma <- sqrt(var(Y) / SNR)
Y <- Y + rnorm(N, 0, sigma)
X1[sample(1:N, size = 500)] <- NA # introduce some missing values
X4[sample(1:N, size = 300)] <- NA # introduce some missing values
data <- data.frame(Y, X1, X2, X3, X4, X5, X6)
set.seed(102)
gbm1 <- gbm(Y ~ ., data = data, var.monotone = c(0, 0, 0, 0, 0, 0),
distribution = "gaussian", n.trees = 100, shrinkage = 0.1,
interaction.depth = 3, bag.fraction = 0.5, train.fraction = 0.5,
n.minobsinnode = 10, cv.folds = 5, keep.data = TRUE,
verbose = FALSE, n.cores = 1)
summary(gbm1)
best.iter <- gbm.perf(gbm1, method = "OOB")
print(best.iter)
best.iter <- gbm.perf(gbm1, method = "test")
print(best.iter)
best.iter <- gbm.perf(gbm1, method = "cv")
print(best.iter)
par(mfrow = c(1, 2))
summary(gbm1, n.trees = 1) # using first tree
summary(gbm1, n.trees = best.iter) # using estimated best number of trees
# Compactly print the first and last trees for curiosity
print(pretty.gbm.tree(gbm1, i.tree = 1))
print(pretty.gbm.tree(gbm1, i.tree = gbm1$n.trees))
plot(gbm1, i.var = 1:2, n.trees = best.iter)
plot(gbm1, i.var = c(1, 2, 6), n.trees = best.iter,
continuous.resolution = 20)
library(wordcloud2)
wordcloud2(demoFreq)
wordcloud2(demoFreq, rotateRatio = 0)
library(RColorBrewer)
pal = brewer.pal(10 , "Set2")
pal = brewer.pal(8 , "Set2")
wordcloud2(demoFreq, rotateRatio = 0, color=pal)
library(finch)
setwd("~/Proyectos/IMOS/imos-user-code-library/R/notebooks")
library(ncdf4)
library(ggplot2)
library(dplyr)
file = 'http://thredds.aodn.org.au/thredds/dodsC/IMOS/ANMN/QLD/GBRPPS/hourly_timeseries/IMOS_ANMN-QLD_BOSTUZ_20071029_GBRPPS_FV02_hourly-timeseries-including-non-QC_END-20190524_C-20191010.nc'
nc = nc_open(file)
## see the variables
names(nc$var)
names(nc$dim)
ncatt_get(nc, "TEMP")
ncatt_get(nc, "TEMP", attname="percent_quality_controlled")
ncatt_get(nc, "TURB", attname="percent_quality_controlled")
df = data.frame("TIME" = ncvar_get(nc, "TIME"),
"TEMP" = ncvar_get(nc, "TEMP"))
df$TIME = as.POSIXct(df$TIME*60*60*24, origin = "1950-01-01T00:00:00")
plot(df$TIME, df$TEMP, ty="l", col="steelblue")
df_depth = data.frame("instrument_index" = ncvar_get(nc, "INSTRUMENT"),
"NOMINAL_DEPTH" = ncvar_get(nc, "NOMINLA_DEPTH"))
df_depth = data.frame("instrument_index" = ncvar_get(nc, "INSTRUMENT"),
"NOMINAL_DEPTH" = ncvar_get(nc, "NOMINAL_DEPTH"))
df_depth = data.frame("instrument_index" = ncvar_get(nc, "INSTRUMENT"))
df_depth = data.frame("instrument_index" = unique(ncvar_get(nc, "instrument_index")),
"NOMINAL_DEPTH" = ncvar_get(nc, "NOMINAL_DEPTH"))
df_depth$instrument_index
plot(df$TIME, df$TEMP, ty="l", xlab="", ylab="TEMP °C", col=instrument_index+1)
plot(df$TIME, df$TEMP, ty="l", xlab="", ylab="TEMP °C", col=df$instrument_index+1)
plot(df$TIME, df$TEMP, ty="l", xlab="", ylab="TEMP °C", col=factor(df$instrument_index+1))
pp = ggplot(df, aes(TIME, TEMP, colour=factor(instrument_index)))
pp + geom_point(size=0.2)
View(df)
df = data.frame("TIME" = ncvar_get(nc, "TIME"),
"TEMP" = ncvar_get(nc, "TEMP"),
"DEPTH"= ncvar_get(nc, "DEPTH"),
"instrument_index" = ncvar_get(nc, "instrument_index"))
df$TIME = as.POSIXct(df$TIME*60*60*24, origin = "1950-01-01T00:00:00")
pp = ggplot(df, aes(TIME, TEMP, colour=factor(instrument_index)))
pp + geom_point(size=0.2)
pp = ggplot(df, aes(TIME, TEMP, colour=factor(instrument_index)))
pp + geom_point(size=0.2) +
theme_minimal(base_size = 12) +
theme(legend.position="none")
print(length(unique(df$instrument_index)))
print(length(unique(df$instrument_index)))
df_depth = data.frame("instrument_index" = unique(ncvar_get(nc, "instrument_index")),   ## as INSTRUMEnT is a coordinate let get the value for instrument_index
"NOMINAL_DEPTH" = ncvar_get(nc, "NOMINAL_DEPTH"))
df_depth
df_depth$DEPTH_bin = cut(df_depth$NOMINAL_DEPTH, breaks = c(10, 20, 30, 40, 50, 60, 70, 80))
View(df_depth)
df_depth$DEPTH_bin = cut(df_depth$NOMINAL_DEPTH, breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80))
View(df_depth)
df = left_join(df, df_depth)
TEMP.summary = df %>% group_by(DEPTH_bin) %>%
summarise(nPoints = n(),
Temp.mean = mean(TEMP, na.rm=T),
TEMP.min = min(TEMP, na.rm=T),
TEMP.max = max(TEMP, na.rm=T),
TEMP.sd = sd(TEMP, na,rm=T))
TEMP.summary = df %>% group_by(DEPTH_bin) %>%
summarise(nPoints = n(),
Temp.mean = mean(TEMP, na.rm=T),
TEMP.min = min(TEMP, na.rm=T),
TEMP.max = max(TEMP, na.rm=T),
TEMP.sd = sd(TEMP, na.rm=T))
library(kableExtra)
pp = ggplot(df, aes(TIME, TEMP, colour=DEPTH_bin))
pp + geom_point(size=0.2) +
labs(x="", y="Temperature °C") +
theme_classic(base_size = 12) +
theme(legend.position="none") +
facet_grid(~DEPTH_bin)
pp + geom_point(size=0.2) +
labs(x="", y="Temperature °C") +
theme_classic(base_size = 12) +
theme(legend.position="none") +
facet_grid(DEPTH_bin~.)
pp = ggplot(df, aes(PSAL, TEMP, colour=DEPTH_bin))
pp + geom_point(size=0.2) +
labs(x="", y="Temperature °C") +
theme_classic(base_size = 12) +
theme(legend.position="none") +
facet_grid(DEPTH_bin~.)
# Chunk 1: setup
# make this an external chunk that can be included in any file
require(knitr)
options(width = 100, stringAsFactors=F)
opts_chunk$set(echo =T, message = F, error = F, warning = F, comment = NA,
fig.align = 'left',  fig.width = 7.5, fig.height = 6,
tidy = F, cache.path = '.cache/', fig.path = 'fig/')
library(RColorBrewer)
palette(brewer.pal(8, "Set2"))
library(kableExtra)
library(ncdf4)
library(ggplot2)
library(dplyr)
# Chunk 2: opendata
file = 'http://thredds.aodn.org.au/thredds/dodsC/IMOS/ANMN/QLD/GBRPPS/hourly_timeseries/IMOS_ANMN-QLD_BOSTUZ_20071029_GBRPPS_FV02_hourly-timeseries-including-non-QC_END-20190524_C-20191010.nc'
nc = nc_open(file)
# Chunk 3: filestructure
## see the variables
names(nc$var)
names(nc$dim)
# Chunk 4: varattrs
ncatt_get(nc, "TEMP", attname="percent_quality_controlled")
ncatt_get(nc, "TURB", attname="percent_quality_controlled")
# Chunk 5: makeDF
df = data.frame("TIME" = ncvar_get(nc, "TIME"),
"TEMP" = ncvar_get(nc, "TEMP"),
"PSAL" = ncvar_get(nc, "PSAL"),
"DEPTH"= ncvar_get(nc, "DEPTH"),
"instrument_index" = ncvar_get(nc, "instrument_index"))
head(df)
# Chunk 6: convertTIME
df$TIME = as.POSIXct(df$TIME*60*60*24, origin = "1950-01-01T00:00:00")
# Chunk 7: plotRaw
plot(df$TIME, df$TEMP, ty="l", col="steelblue", xlab="", ylab="TEMP °C")
# Chunk 8: nInstruments
print(length(unique(df$instrument_index)))
# Chunk 9: plotByInstrument
pp = ggplot(df, aes(TIME, TEMP, colour=factor(instrument_index)))
pp + geom_point(size=0.2) +
labs(x="", y="Temperature °C", subtitle = file) +
theme_classic(base_size = 12) +
theme(legend.position="none")
# Chunk 10: getNomDepth
df_depth = data.frame("instrument_index" = unique(ncvar_get(nc, "instrument_index")),   ## as INSTRUMEnT is a coordinate let get the value for instrument_index
"NOMINAL_DEPTH" = ncvar_get(nc, "NOMINAL_DEPTH"))
df_depth
## we don't need the ncdf object anymore, so close it
nc_close(nc)
# Chunk 11: cutDepth
df_depth$DEPTH_bin = cut(df_depth$NOMINAL_DEPTH, breaks = c(0, 10, 20, 30, 40, 50, 60, 70, 80))
# Chunk 12: joinDepth
df = left_join(df, df_depth)
# Chunk 13: TEMPbydepth
TEMP.summary = df %>% group_by(DEPTH_bin) %>%
summarise(nPoints = n(),
Temp.mean = mean(TEMP, na.rm=T),
TEMP.min = min(TEMP, na.rm=T),
TEMP.max = max(TEMP, na.rm=T),
TEMP.sd = sd(TEMP, na.rm=T))
kable(TEMP.summary) %>% kable_styling(bootstrap_options = c("striped", "hover"))
# Chunk 14: tempPlotDepth
pp = ggplot(df, aes(TIME, TEMP, colour=DEPTH_bin))
pp + geom_point(size=0.2) +
labs(x="", y="Temperature °C") +
theme_classic(base_size = 12) +
theme(legend.position="none") +
facet_grid(DEPTH_bin~.)
# Chunk 15: tempPlotDepth
pp = ggplot(df, aes(PSAL, TEMP, colour=DEPTH_bin))
pp + geom_point(size=0.2) +
labs(x="", y="Temperature °C") +
theme_classic(base_size = 12) +
theme(legend.position="none") +
facet_grid(DEPTH_bin~.)
pp = ggplot(df, aes(PSAL, TEMP, colour=DEPTH_bin))
pp + geom_point(size=0.2) +
labs(x="Salinity", y="Temperature °C") +
theme_classic(base_size = 12) +
theme(legend.position="none") +
facet_grid(DEPTH_bin~.)
pp = ggplot(df, aes(TIME, TEMP, colour=DEPTH_bin))
pp + geom_point(size=0.2) +
labs(x="", y="Temperature °C") +
theme_ligth(base_size = 12) +
theme(legend.position="none") +
facet_grid(DEPTH_bin~.)
pp + geom_point(size=0.2) +
labs(x="", y="Temperature °C") +
theme_light(base_size = 12) +
theme(legend.position="none") +
facet_grid(DEPTH_bin~.)
